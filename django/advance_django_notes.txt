# Advance Django notes


# drf
Throttling

# excersice to revise django, 

# excersice to revise django rest framework 


todo 
create default model2 on model1 creation
paginate todo model2 - 

#################################################################
## Pagination
#################################################################
from django.core.paginator import Paginator
p = Paginator(objects, 2)
p.count
p.num_pages
page1 = p.page(1)
page1.object_list
page2.has_next()
page2.has_previous()
page2.has_other_pages()
page2.next_page_number()
page2.previous_page_number()
page2.start_index()
page2.end_index()
p.page(1) # 1 based index (1-to available pages)

# class based view
class ContactListView(ListView):
    paginate_by = 2
    model = Contact

# function based view
from django.core.paginator import Paginator
from django.shortcuts import render

from myapp.models import Contact

def listing(request):
    contact_list = Contact.objects.all()
    paginator = Paginator(contact_list, 25) # Show 25 contacts per page.

    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return render(request, 'list.html', {'page_obj': page_obj})

########################################################################
## signals
########################################################################
from django.apps import AppConfig
from django.core.signals import request_finished

class MyAppConfig(AppConfig):
    ...

    def ready(self):
        # Implicitly connect signal handlers decorated with @receiver.
        from . import signals
        # Explicitly connect a signal handler.
        request_finished.connect(signals.my_callback)


from django.db.models.signals import pre_save
from django.dispatch import receiver
from myapp.models import MyModel


@receiver(pre_save, sender=MyModel)
def my_handler(sender, instance, created, **kwargs):
    pass

# connectinge signals (another method)
from django.core.signals import request_finished
request_finished.connect(my_callback, dispatch_uid="my_unique_identifier")

# Types of Signals

- Model signals - (django.db.models.signals.pre_init)
pre_init
post_init
pre_save
post_save
pre_delete
post_delete
m2m_changed
class_prepared

- Management signals (django.db.models.signals.pre_migrate)
pre_migrate
post_migrate

- Request/response signals (django.core.signals.request_started)
request_started
request_finished
got_request_exception

- Test signals (django.test.signals.setting_changed)
setting_changed
template_rendered

- Database Wrappers (django.db.backends.signals.connection_created)
connection_created

# Celery
- Celery is a task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well.

# Rabbit-mq 
- RabbitMQ is a message broker: it accepts and forwards messages. You can think about it as a post office: when you put the mail that you want posting in a post box, you can be sure that the letter carrier will eventually deliver the mail to your recipient. In this analogy, RabbitMQ is a post box, a post office, and a letter carrier.


def to_representation(self, instance):
    """Convert `username` to lowercase."""
    ret = super().to_representation(instance)
    ret['username'] = ret['username'].lower()
    return ret



Like Django's Model and ModelForm classes, the inner Meta class on serializers does not implicitly inherit from it's parents' inner Meta classes. If you want the Meta class to inherit from a parent class you must do so explicitly. For example:

class AccountSerializer(MyBaseSerializer):
    class Meta(MyBaseSerializer.Meta):
        model = Account


