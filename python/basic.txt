data types
Text Type       :	str
Numeric Types   :	int, float, complex
Sequence Types  :	list, tuple, range
Mapping Type    :	dict
Set Types       :	set, frozenset
Boolean Type    :	bool
Binary Types    :	bytes, bytearray, memoryview
None Type       :	NoneType


tuple vs list
The key difference between tuples and lists is that while tuples are immutable objects, lists are mutable. This means tuples cannot be changed while lists can be modified. Tuples are also more memory efficient than the lists. When it comes to time efficiency, tuples have a slight advantage over lists especially when we consider lookup value. If you have data that shouldnâ€™t change, you should choose tuple data type over lists.


Decorators
allows you to modify or extend the behavior of functions or methods without changing their actual code. They are an excellent way to apply reusable functionality across multiple functions, such as timing, caching, logging, or authentication.
https://www.programiz.com/python-programming/decorator


Although tuple are immutable, it consist of list than, we can add elements and remove from list.
>>> a = ([10,20,30], 2,3)
>>> a[0].append(40)
>>> a
([10, 20, 30, 40], 2, 3)
>>> a[1] = 20
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> a[0].clear()


# deepcopy and shallow copy - revise
baisic encryption/decryption in python
django authentication, revision

In general, a Python object has two different string representations:

repr(obj) is defined by obj.__repr__() and should return a developer-friendly representation of obj. If possible, this should be code that can recreate obj. Data classes do this.

str(obj) is defined by obj.__str__() and should return a user-friendly representation of obj. Data classes do not implement a .__str__() method, so Python will fall back to the .__repr__() method.



